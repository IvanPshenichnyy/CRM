импорт Основное
импорт Мероприятия

@Обработчик
метод ПриЗаполнении()
    Ответственный = ПользователиКлиентИСервер.ПолучитьДанныеТекущегоПользователя().Сотрудник
;

@Обработчик
метод ПослеЗаписи(До: Клиенты.Данные, ПараметрыЗаписи: Клиенты.ПараметрыЗаписи)
    если Регион != До.Регион
        ПересчитатьРазрешенияДоступаСвязанныхОбъектов()
    ;
;

метод ПересчитатьРазрешенияДоступаСвязанныхОбъектов()
    исп КонтекстДоступа.Привилегированный()
    
    // Разрешения Контактных лиц зависят от их Клиентов
    знч ДанныеРасчетаРазрешенийКонтактныхЛиц = новый КонтактныеЛица.ДанныеРасчетаРазрешений(Ссылка)
    КонтактныеЛица.ПересчитатьРазрешенияДоступаДляОбъектов([ДанныеРасчетаРазрешенийКонтактныхЛиц])
    
    // Разрешения Сделок зависят от их Клиентов
    знч ДанныеРасчетаРазрешенийСделок = новый Сделки.ДанныеРасчетаРазрешений(Ссылка)
    Сделки.ПересчитатьРазрешенияДоступаДляОбъектов([ДанныеРасчетаРазрешенийСделок])
    
    // Разрешения Задач и Событий зависят от их Сделок
    знч СделкиКлиента = Клиенты.ПолучитьСделкиКлиента(Ссылка)
    
    знч ЗадачиСделок = Сделки.ПолучитьЗадачиСделок(СделкиКлиента).Преобразовать(ЗадачаСсылка -> ЗадачаСсылка.ЗагрузитьОбъект()!)
    Задачи.ПересчитатьРазрешенияДоступаДляОбъектов(ЗадачиСделок)
    
    знч СобытияСделок = Сделки.ПолучитьСобытияСделок(СделкиКлиента).Преобразовать(СобытиеСсылка -> СобытиеСсылка.ЗагрузитьОбъект()!)
    События.ПересчитатьРазрешенияДоступаДляОбъектов(СобытияСделок)
;